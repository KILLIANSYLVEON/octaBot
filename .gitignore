import discord
from discord.ext import commands, tasks
import random
import asyncio
from discord import Streaming
from discord.utils import get
from discord import app_commands
#from discord_slash import SlashCommand

#import interaction




bot = commands.Bot(command_prefix="--", intents=discord.Intents.all())

#slash = SlashCommand(bot, sync_commands = True)
import typing 

#@slash.slash(name="testc", description="fait un test de commande")
#async def testc(ctx):
#    await ctx.send("test")






status = ["avec octiveM|--help", "discord|--help", "avec moi-meme|--help", "avec toi|--help", "avec killian(ニンフィア)|--help", "ma vie de bot|--help"]







@tasks.loop(minutes = 1, seconds = 45)
async def changeStatus():
    game = discord.Game(random.choice(status))
    await bot.change_presence(status = discord.Status.online, activity = game)


@bot.command()
async def test(ctx, *,member: discord.member=None):
    member = ctx.author if not member else member
    embed = discord.Embed(title ="test", description = "test et test", color = 0xFF33BF)
    embed.set_thumbnail(url=member.avatar_url)

    await ctx.send(embed = embed)





@bot.command()
async def reseaux(ctx):
    youtubel = "https://www.youtube.com/@octivem"
    twitchl = "https://www.twitch.tv/octivemytb"
    embed = discord.Embed(title = "les different lien de octive", description = f"sur youtube {youtubel}\n et aussi sur twitch {twitchl}")
    embed.set_thumbnail(url = "https://yt3.googleusercontent.com/xHleTZ7BEs9z8UYgcU1N3JPF_FEiERSTCjrALYBJIPYfz-kKhXKw7ZOVQm9GytFPNeJqGwanOxA=s88-c-k-c0x00ffffff-no-rj")

    await ctx.send(embed = embed)

  


@bot.command()
async def on_member_join(member):
    role_id = 1009400198616862742

    guild = ctx.guild
    role = get(member.guild.roles, id=1009400198616862742)
    await user.add_roles(role)






@bot.event
async def on_ready():
    print("bot en ligne")
    synced = await bot.tree.sync()
    print("syncroniser")
    changeStatus.start()

@app_commands.context_menu()
async def react(interaction: discord.Interaction, message: discord.Message):
    await interaction.response.send_message('Very cool message!', ephemeral=True)




@bot.event
async def on_member_join(member):
    channel = bot.get_channel(1009383466644807780)
    embed = discord.Embed(title = (member), description = "bienvenue a toi sur le serveur de octive m", color = 0x3377FF)

    embed.add_field(name = "total des menbres", value = (member.guild.member_count))
    await channel.send(f"merci {member.mention}")


    await channel.send(embed= embed)

channel = (1009383466644807780)



@bot.command()
async def tm(member):
    await member.send(f"le nonbre de personne est de {member.guild.member_count} menbre")





@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(1009383466644807780)
    embed = discord.Embed(title =f"dommage {member.name}", description = "un menbre vient de nous quitter", color =0xBE2808)

    await channel.send(embed= embed)




@bot.tree.command()
async def test(interaction: discord.Interaction):
    """Help""" #Description when viewing / commands
    await interaction.response.send_message("hello")




@bot.tree.command(name="dire")
@app_commands.describe(thing_to_say = "que veut tu dire")
async def dit(interaction: discord.Interaction, thing_to_say: str):
    await interaction.response.send_message(f"{interaction.user.name} a dit: {thing_to_say}")



@bot.command()
async def message(ctx, user:discord.Member, *, message=None):
    message = message
    await user.send(message)



@bot.command()
@commands.has_permissions(ban_members = True)
async def ban(ctx, member : discord.Member, *, reason = None):
    await member.ban(reason = reason)












@bot.command()
async def ping(ctx):
    await ctx.reply(f'pong avec une latence de {round(bot.latency * 1000)}ms')






@bot.command()

async def ing(ctx):
    await ctx.send("ong")

@bot.command()
async def salut(ctx):
    await ctx.reply("salut")




#member.guild.member_count
#datetime.datetime.utcnow


class MyCog(commands.Cog):
  def __init__(self, bot: commands.Bot) -> None:
    self.bot: commands.Bot = bot
  
  @commands.hybrid_command(name="ping")
  async def ping_command(self, ctx: commands.Context) -> None:
    """
    This command is actually used as an app command AND a message command.
    This means it is invoked with `?ping` and `/ping` (once synced, of course).
    """

    await ctx.send("Hello!")
    # we use ctx.send and this will handle both the message command and app command of sending.
    # added note: you can check if this command is invoked as an app command by checking the `ctx.interaction` attribute.
    
   
  @commands.hybrid_group(name="parent")
  async def parent_command(self, ctx: commands.Context) -> None:
    """
    We even have the use of parents. This will work as usual for ext.commands but will be un-invokable for app commands.
    This is a discord limitation as groups are un-invokable.
    """
    ...   # nothing we want to do in here, I guess!
    
  @parent_command.command(name="sub")
  async def sub_command(self, ctx: commands.Context, argument: str) -> None:
    """
    This subcommand can now be invoked with `?parent sub <arg>` or `/parent sub <arg>` (once synced).
    """

    await ctx.send(f"Hello, you sent {argument}!")
    
async def setup(bot: commands.Bot) -> None:
  await bot.add_cog(MyCog(bot))






#@slash.slash(name="test", description="commande test")
#async def test(ctx):
#    await ctx.send("test fait")




#@bot.hybrid_command()
#async def hybrid(ctx):
#    await ctx.send("test commande hybride")


#@bot.slash_command(description="Responds with 'World'")
#async def hello(inter):
#   await inter.response.send_message("World")



#@bot.tree.command()
#async def my_command(interaction: discord.Interaction):
#  await interaction.response.send_message("Hello from my command!")




bot.run("TOKEN")
